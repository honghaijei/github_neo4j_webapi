from __future__ import unicode_literals
from django.db import models

class Project(models.Model):
    project_id  = models.TextField()
    project_name = models.TextField()
    project_tag = models.TextField()
    similar_projects = models.TextField()
    manager = models.TextField()
    licenses = models.TextField()
    support = models.TextField()

class Developer(models.Model):
    developer_id  = models.TextField()
    name = models.TextField()
    personal_homepage = models.TextField()
    cooperation = models.TextField()
    describer = models.IntegerField()
    repo_man_women = models.IntegerField()
    manage_projects_number = models.IntegerField()
    stacker = models.IntegerField()
    org_man = models.IntegerField()
    fosser = models.IntegerField()
    texonomist = models.TextField()
    kudo = models.TextField()
    commit_by_time = models.TextField()
    commits_by_project = models.TextField()
    commit_message = models.TextField()
    programming_language = models.TextField()
    joined_openhub = models.DateTimeField()
    first_commit = models.DateTimeField()
    most_recent_commit = models.DateTimeField()
    joined_github = models.DateTimeField()
    location = models.TextField()
    email = models.TextField()
    followers = models.IntegerField()
    following = models.IntegerField()
    hireable = models.BooleanField()
    bio = models.TextField()
    starred_url = models.TextField(blank=True)
    subscriptions_url = models.TextField(blank=True)
    longest_streak = models.IntegerField()
    current_streak = models.IntegerField()
    github_json = models.TextField()

class Commit(models.Model):
    commit_id = models.TextField()
    commit_message = models.TextField()
    author = models.TextField()
    contributor = models.TextField()
    files_modified = models.IntegerField()
    lines_added = models.IntegerField()
    lines_removed = models.IntegerField()
    code_location = models.TextField()
    commit_time = models.DateTimeField()
    files_modified = models.TextField()
    project_id = models.TextField()
    merge_base_commit = models.TextField()
    github_json = models.TextField()

class Code(models.Model):
    code_id = models.TextField()
    function = models.TextField()
    fields = models.TextField()
    implementation_technology = models.TextField()
    application = models.TextField()
    project_id = models.TextField()
    imcomplete_results = models.BooleanField()
    path = models.TextField()
    file_name = models.TextField()
    repository = models.TextField()
    description = models.TextField()
    github_json = models.TextField()

class Assessment(models.Model):
    project_id = models.TextField()
    community_score = models.TextField()

class Cost(models.Model):
    project_id = models.TextField()
    average_configuration_cost = models.TextField()
    average_code_cost = models.TextField()
    code_library = models.IntegerField()
    person_years = models.TextField()

class Issue(models.Model):
    issue_id = models.TextField()
    total_count = models.IntegerField()
    imcomplete_result = models.BooleanField()
    label = models.TextField()
    state = models.TextField()
    comments = models.IntegerField()
    bug_create_time = models.DateTimeField()
    bug_close_time = models.DateTimeField()
    closed_bug_number = models.IntegerField()
    new_create_bug = models.IntegerField()
    issue_rate = models.IntegerField()
    issue_commit_time = models.DateTimeField()
    issue_create_time = models.DateTimeField()
    issue_close_time = models.DateTimeField()
    solved_issue_numbers = models.IntegerField()
    all_issue_numbers = models.IntegerField()
    github_json = models.TextField()

class Document(models.Model):
    document_id = models.TextField()
    project_id = models.TextField()
    file_name = models.TextField()

class Language(models.Model):
    language_id = models.TextField()
    project_id = models.TextField()
    language_name = models.TextField()
    language_lines = models.TextField()
    total_comment_lines = models.TextField()
    comment_ratio = models.TextField()
    blank_lines = models.TextField()
    total_lines = models.TextField()
    total_percentage = models.TextField()

class Repository(models.Model):
    repository_id = models.TextField()
    owner = models.TextField()
    repository_name = models.TextField()
    description = models.TextField()
    fork = models.BooleanField()
    html_url = models.TextField()
    commit_message = models.TextField()
    contributors = models.TextField()
    forks_url = models.TextField()
    issues_url = models.TextField()
    forks_count = models.IntegerField()
    watchers_count = models.IntegerField()
    size = models.IntegerField()
    has_issues = models.BooleanField()
    branches = models.TextField()
    releases = models.TextField()
    github_json = models.TextField()

class News(models.Model):
    project_age = models.TextField()
    activity = models.TextField()
    comments = models.TextField()
    team_size_per_month = models.TextField()
    contributor_number = models.TextField()
    programming_language = models.TextField()
    total_lines = models.IntegerField()
    code_lines = models.IntegerField()
    total_comment_lines = models.IntegerField()
    total_blank_lines = models.IntegerField()
    time_efforts = models.TextField()
    commit_id = models.TextField()
    followers_url = models.TextField()
    watch = models.IntegerField()
    star = models.IntegerField()
    fork = models.IntegerField()
    requirements_number = models.IntegerField()
    requirements_change_rate = models.IntegerField()
    requirements_build_success_rate = models.IntegerField()
    requirements_release_rate = models.IntegerField()
    github_json = models.TextField()
